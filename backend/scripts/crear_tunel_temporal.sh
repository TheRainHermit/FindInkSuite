#!/bin/bash

# üöÄ Soluci√≥n temporal: LocalTunnel para acceso inmediato
# ======================================================

API_PORT=8001
LOG_FILE="tunnel.log"

echo "üöÄ INICIANDO T√öNEL TEMPORAL PARA TU API"
echo "======================================"

# Verificar que el servidor local est√° corriendo
echo "üîç Verificando servidor local..."
if curl -s --connect-timeout 3 "http://localhost:$API_PORT/" >/dev/null 2>&1; then
    echo "   ‚úÖ Servidor API corriendo en puerto $API_PORT"
else
    echo "   ‚ùå Servidor API no responde en puerto $API_PORT"
    echo "   Iniciando servidor..."
    nohup python3 tattoo_cors_ultra.py > servidor_cors_ultra.log 2>&1 &
    sleep 5
fi

# Generar subdominio √∫nico con timestamp
TIMESTAMP=$(date +%H%M)
SUBDOMAIN="tattoo-api-$TIMESTAMP"

echo ""
echo "üåê Creando t√∫nel LocalTunnel..."
echo "   Subdominio: $SUBDOMAIN"
echo "   Puerto local: $API_PORT"

# Crear t√∫nel con reintentos
for attempt in 1 2 3; do
    echo "   Intento $attempt/3..."
    
    # Iniciar t√∫nel en background
    timeout 30 lt --port $API_PORT --subdomain $SUBDOMAIN > $LOG_FILE 2>&1 &
    TUNNEL_PID=$!
    
    # Esperar a que el t√∫nel se establezca
    sleep 8
    
    # Verificar si el t√∫nel est√° funcionando
    if grep -q "your url is:" $LOG_FILE; then
        TUNNEL_URL=$(grep "your url is:" $LOG_FILE | awk '{print $4}')
        echo "   ‚úÖ T√∫nel creado: $TUNNEL_URL"
        
        # Test r√°pido del t√∫nel
        sleep 3
        if curl -s --connect-timeout 10 "$TUNNEL_URL/" | grep -q "tattoo\|cors\|FastAPI" 2>/dev/null; then
            echo "   ‚úÖ T√∫nel verificado y funcionando"
            
            echo ""
            echo "üéâ T√öNEL ACTIVO Y FUNCIONANDO"
            echo "============================"
            echo "üåê URL para tu compa√±ero: $TUNNEL_URL"
            echo "üìö Documentaci√≥n: $TUNNEL_URL/docs"
            echo "üß™ Test CORS: $TUNNEL_URL/api/cors-test"
            echo "ü§ñ AI Chat: $TUNNEL_URL/api/ai/quick-chat"
            echo ""
            echo "üíª C√≥digo JavaScript para tu compa√±ero:"
            echo "const API_BASE = '$TUNNEL_URL';"
            echo ""
            echo "‚è∞ IMPORTANTE: Este t√∫nel es temporal"
            echo "   ‚Ä¢ Se mantendr√° activo mientras esta terminal est√© abierta"
            echo "   ‚Ä¢ Para acceso permanente, configura el router:"
            echo "     TCP 8001 ‚Üí 192.168.101.71:8001"
            echo ""
            echo "üîÑ El t√∫nel est√° corriendo (PID: $TUNNEL_PID)"
            echo "   Para detenerlo: kill $TUNNEL_PID"
            
            # Mostrar logs en tiempo real
            echo ""
            echo "üìã Logs del t√∫nel (Ctrl+C para salir):"
            echo "======================================"
            tail -f $LOG_FILE
            exit 0
        else
            echo "   ‚ö†Ô∏è T√∫nel creado pero no responde correctamente"
            kill $TUNNEL_PID 2>/dev/null
        fi
    else
        echo "   ‚ùå Fallo en intento $attempt"
        kill $TUNNEL_PID 2>/dev/null
    fi
    
    sleep 2
done

echo ""
echo "‚ùå No se pudo establecer t√∫nel LocalTunnel"
echo ""
echo "üîß ALTERNATIVAS:"
echo "==============="
echo "1. Configurar router manualmente:"
echo "   ‚Ä¢ http://192.168.101.1"
echo "   ‚Ä¢ Port Forwarding: TCP 8001 ‚Üí 192.168.101.71:8001"
echo ""
echo "2. Usar ngrok (alternativa):"
echo "   ‚Ä¢ wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"
echo "   ‚Ä¢ unzip ngrok-stable-linux-amd64.zip"
echo "   ‚Ä¢ ./ngrok http 8001"
echo ""
echo "3. CloudFlare Tunnel (gratuito, permanente):"
echo "   ‚Ä¢ curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb"
echo "   ‚Ä¢ sudo dpkg -i cloudflared.deb"
echo "   ‚Ä¢ cloudflared tunnel --hello-world"